// Bootstrap code
1 @256
2 D=A
3 @SP
4 M=D
// call Sys.init 0
// push_Label
5 @ret.1
6 D=A
7 @SP
8 AM=M+1
9 A=A-1
10 M=D
// push_LCL
11 @LCL
12 D=M
13 @SP
14 AM=M+1
15 A=A-1
16 M=D
// push_ARG
17 @ARG
18 D=M
19 @SP
20 AM=M+1
21 A=A-1
22 M=D
// push_THIS
23 @THIS
24 D=M
25 @SP
26 AM=M+1
27 A=A-1
28 M=D
// push_THAT
29 @THAT
30 D=M
31 @SP
32 AM=M+1
33 A=A-1
34 M=D
// set_ARG
35 @SP
36 D=M
37 @5
38 D=D-A
39 @0
40 D=D-A
41 @ARG
42 M=D
// ser_LCL
43 @SP
44 D=M
45 @LCL
46 M=D
// goto_func
47 @Sys.init
48 0;JMP
// set_retlabel
(ret.1)
// function Sys.init 0
(Sys.init)
// push constant 6
49 @6
50 D=A
51 @SP
52 AM=M+1
53 A=A-1
54 M=D
// push constant 8
55 @8
56 D=A
57 @SP
58 AM=M+1
59 A=A-1
60 M=D
// call Class1.set 2
// push_Label
61 @Sys.init$ret.2
62 D=A
63 @SP
64 AM=M+1
65 A=A-1
66 M=D
// push_LCL
67 @LCL
68 D=M
69 @SP
70 AM=M+1
71 A=A-1
72 M=D
// push_ARG
73 @ARG
74 D=M
75 @SP
76 AM=M+1
77 A=A-1
78 M=D
// push_THIS
79 @THIS
80 D=M
81 @SP
82 AM=M+1
83 A=A-1
84 M=D
// push_THAT
85 @THAT
86 D=M
87 @SP
88 AM=M+1
89 A=A-1
90 M=D
// set_ARG
91 @SP
92 D=M
93 @5
94 D=D-A
95 @2
96 D=D-A
97 @ARG
98 M=D
// ser_LCL
99 @SP
100 D=M
101 @LCL
102 M=D
// goto_func
103 @Class1.set
104 0;JMP
// set_retlabel
(Sys.init$ret.2)
// pop temp 0
105 @SP
106 AM=M-1
107 D=M
108 @5
109 M=D
// push constant 23
110 @23
111 D=A
112 @SP
113 AM=M+1
114 A=A-1
115 M=D
// push constant 15
116 @15
117 D=A
118 @SP
119 AM=M+1
120 A=A-1
121 M=D
// call Class2.set 2
// push_Label
122 @Sys.init$ret.3
123 D=A
124 @SP
125 AM=M+1
126 A=A-1
127 M=D
// push_LCL
128 @LCL
129 D=M
130 @SP
131 AM=M+1
132 A=A-1
133 M=D
// push_ARG
134 @ARG
135 D=M
136 @SP
137 AM=M+1
138 A=A-1
139 M=D
// push_THIS
140 @THIS
141 D=M
142 @SP
143 AM=M+1
144 A=A-1
145 M=D
// push_THAT
146 @THAT
147 D=M
148 @SP
149 AM=M+1
150 A=A-1
151 M=D
// set_ARG
152 @SP
153 D=M
154 @5
155 D=D-A
156 @2
157 D=D-A
158 @ARG
159 M=D
// ser_LCL
160 @SP
161 D=M
162 @LCL
163 M=D
// goto_func
164 @Class2.set
165 0;JMP
// set_retlabel
(Sys.init$ret.3)
// pop temp 0
166 @SP
167 AM=M-1
168 D=M
169 @5
170 M=D
// call Class1.get 0
// push_Label
171 @Sys.init$ret.4
172 D=A
173 @SP
174 AM=M+1
175 A=A-1
176 M=D
// push_LCL
177 @LCL
178 D=M
179 @SP
180 AM=M+1
181 A=A-1
182 M=D
// push_ARG
183 @ARG
184 D=M
185 @SP
186 AM=M+1
187 A=A-1
188 M=D
// push_THIS
189 @THIS
190 D=M
191 @SP
192 AM=M+1
193 A=A-1
194 M=D
// push_THAT
195 @THAT
196 D=M
197 @SP
198 AM=M+1
199 A=A-1
200 M=D
// set_ARG
201 @SP
202 D=M
203 @5
204 D=D-A
205 @0
206 D=D-A
207 @ARG
208 M=D
// ser_LCL
209 @SP
210 D=M
211 @LCL
212 M=D
// goto_func
213 @Class1.get
214 0;JMP
// set_retlabel
(Sys.init$ret.4)
// call Class2.get 0
// push_Label
215 @Sys.init$ret.5
216 D=A
217 @SP
218 AM=M+1
219 A=A-1
220 M=D
// push_LCL
221 @LCL
222 D=M
223 @SP
224 AM=M+1
225 A=A-1
226 M=D
// push_ARG
227 @ARG
228 D=M
229 @SP
230 AM=M+1
231 A=A-1
232 M=D
// push_THIS
233 @THIS
234 D=M
235 @SP
236 AM=M+1
237 A=A-1
238 M=D
// push_THAT
239 @THAT
240 D=M
241 @SP
242 AM=M+1
243 A=A-1
244 M=D
// set_ARG
245 @SP
246 D=M
247 @5
248 D=D-A
249 @0
250 D=D-A
251 @ARG
252 M=D
// ser_LCL
253 @SP
254 D=M
255 @LCL
256 M=D
// goto_func
257 @Class2.get
258 0;JMP
// set_retlabel
(Sys.init$ret.5)
// label WHILE
(Sys.init$WHILE)
// goto WHILE
259 @Sys.init$WHILE
260 0;JMP
// function Class1.set 0
(Class1.set)
// push argument 0
261 @ARG
262 D=M
263 @0
264 A=A+D
265 D=M
266 @SP
267 AM=M+1
268 A=A-1
269 M=D
// pop Class1 0
270 @SP
271 AM=M-1
272 D=M
273 @Class1.0
274 M=D
// push argument 1
275 @ARG
276 D=M
277 @1
278 A=A+D
279 D=M
280 @SP
281 AM=M+1
282 A=A-1
283 M=D
// pop Class1 1
284 @SP
285 AM=M-1
286 D=M
287 @Class1.1
288 M=D
// push constant 0
289 @0
290 D=A
291 @SP
292 AM=M+1
293 A=A-1
294 M=D
// return
// set_endFrame
295 @LCL
296 D=M
297 @endFrame
298 M=D
// set_retAddr
299 @endFrame
300 D=M
301 @5
302 A=D-A
303 D=M
304 @retAddr1
305 M=D
// get_retvalue
306 @SP
307 AM=M-1
308 D=M
309 @ARG
310 A=M
311 M=D
// reset_SP
312 @ARG
313 D=M
314 @1
315 D=D+A
316 @SP
317 M=D
// restore_THAT
318 @endFrame
319 D=M
320 @1
321 A=D-A
322 D=M
323 @THAT
324 M=D
// restore_THIS
325 @endFrame
326 D=M
327 @2
328 A=D-A
329 D=M
330 @THIS
331 M=D
// restore_ARG
332 @endFrame
333 D=M
334 @3
335 A=D-A
336 D=M
337 @ARG
338 M=D
// restore_LCL
339 @endFrame
340 D=M
341 @4
342 A=D-A
343 D=M
344 @LCL
345 M=D
// goto_retAddr
346 @retAddr1
347 A=M
348 0;JMP
// function Class1.get 0
(Class1.get)
// push Class1 0
349 @Class1.0
350 D=M
351 @SP
352 AM=M+1
353 A=A-1
354 M=D
// push Class1 1
355 @Class1.1
356 D=M
357 @SP
358 AM=M+1
359 A=A-1
360 M=D
// sub
361 @SP
362 AM=M-1
363 D=M
364 A=A-1
365 M=M-D
// return
// set_endFrame
366 @LCL
367 D=M
368 @endFrame
369 M=D
// set_retAddr
370 @endFrame
371 D=M
372 @5
373 A=D-A
374 D=M
375 @retAddr2
376 M=D
// get_retvalue
377 @SP
378 AM=M-1
379 D=M
380 @ARG
381 A=M
382 M=D
// reset_SP
383 @ARG
384 D=M
385 @1
386 D=D+A
387 @SP
388 M=D
// restore_THAT
389 @endFrame
390 D=M
391 @1
392 A=D-A
393 D=M
394 @THAT
395 M=D
// restore_THIS
396 @endFrame
397 D=M
398 @2
399 A=D-A
400 D=M
401 @THIS
402 M=D
// restore_ARG
403 @endFrame
404 D=M
405 @3
406 A=D-A
407 D=M
408 @ARG
409 M=D
// restore_LCL
410 @endFrame
411 D=M
412 @4
413 A=D-A
414 D=M
415 @LCL
416 M=D
// goto_retAddr
417 @retAddr2
418 A=M
419 0;JMP
// function Class2.set 0
(Class2.set)
// push argument 0
420 @ARG
421 D=M
422 @0
423 A=A+D
424 D=M
425 @SP
426 AM=M+1
427 A=A-1
428 M=D
// pop Class2 0
429 @SP
430 AM=M-1
431 D=M
432 @Class2.0
433 M=D
// push argument 1
434 @ARG
435 D=M
436 @1
437 A=A+D
438 D=M
439 @SP
440 AM=M+1
441 A=A-1
442 M=D
// pop Class2 1
443 @SP
444 AM=M-1
445 D=M
446 @Class2.1
447 M=D
// push constant 0
448 @0
449 D=A
450 @SP
451 AM=M+1
452 A=A-1
453 M=D
// return
// set_endFrame
454 @LCL
455 D=M
456 @endFrame
457 M=D
// set_retAddr
458 @endFrame
459 D=M
460 @5
461 A=D-A
462 D=M
463 @retAddr3
464 M=D
// get_retvalue
465 @SP
466 AM=M-1
467 D=M
468 @ARG
469 A=M
470 M=D
// reset_SP
471 @ARG
472 D=M
473 @1
474 D=D+A
475 @SP
476 M=D
// restore_THAT
477 @endFrame
478 D=M
479 @1
480 A=D-A
481 D=M
482 @THAT
483 M=D
// restore_THIS
484 @endFrame
485 D=M
486 @2
487 A=D-A
488 D=M
489 @THIS
490 M=D
// restore_ARG
491 @endFrame
492 D=M
493 @3
494 A=D-A
495 D=M
496 @ARG
497 M=D
// restore_LCL
498 @endFrame
499 D=M
500 @4
501 A=D-A
502 D=M
503 @LCL
504 M=D
// goto_retAddr
505 @retAddr3
506 A=M
507 0;JMP
// function Class2.get 0
(Class2.get)
// push Class2 0
508 @Class2.0
509 D=M
510 @SP
511 AM=M+1
512 A=A-1
513 M=D
// push Class2 1
514 @Class2.1
515 D=M
516 @SP
517 AM=M+1
518 A=A-1
519 M=D
// sub
520 @SP
521 AM=M-1
522 D=M
523 A=A-1
524 M=M-D
// return
// set_endFrame
525 @LCL
526 D=M
527 @endFrame
528 M=D
// set_retAddr
529 @endFrame
530 D=M
531 @5
532 A=D-A
533 D=M
534 @retAddr4
535 M=D
// get_retvalue
536 @SP
537 AM=M-1
538 D=M
539 @ARG
540 A=M
541 M=D
// reset_SP
542 @ARG
543 D=M
544 @1
545 D=D+A
546 @SP
547 M=D
// restore_THAT
548 @endFrame
549 D=M
550 @1
551 A=D-A
552 D=M
553 @THAT
554 M=D
// restore_THIS
555 @endFrame
556 D=M
557 @2
558 A=D-A
559 D=M
560 @THIS
561 M=D
// restore_ARG
562 @endFrame
563 D=M
564 @3
565 A=D-A
566 D=M
567 @ARG
568 M=D
// restore_LCL
569 @endFrame
570 D=M
571 @4
572 A=D-A
573 D=M
574 @LCL
575 M=D
// goto_retAddr
576 @retAddr4
577 A=M
578 0;JMP
