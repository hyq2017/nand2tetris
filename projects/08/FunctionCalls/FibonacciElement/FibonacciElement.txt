// Bootstrap code
1 @256
2 D=A
3 @SP
4 M=D
// call Sys.init 0
// push_Label
5 @ret.1
6 D=A
7 @SP
8 AM=M+1
9 A=A-1
10 M=D
// push_LCL
11 @LCL
12 D=M
13 @SP
14 AM=M+1
15 A=A-1
16 M=D
// push_ARG
17 @ARG
18 D=M
19 @SP
20 AM=M+1
21 A=A-1
22 M=D
// push_THIS
23 @THIS
24 D=M
25 @SP
26 AM=M+1
27 A=A-1
28 M=D
// push_THAT
29 @THAT
30 D=M
31 @SP
32 AM=M+1
33 A=A-1
34 M=D
// set_ARG
35 @SP
36 D=M
37 @5
38 D=D-A
39 @0
40 D=D-A
41 @ARG
42 M=D
// ser_LCL
43 @SP
44 D=M
45 @LCL
46 M=D
// goto_func
47 @Sys.init
48 0;JMP
// set_retlabel
(ret.1)
// function Sys.init 0
(Sys.init)
// push constant 4
49 @4
50 D=A
51 @SP
52 AM=M+1
53 A=A-1
54 M=D
// call Main.fibonacci 1
// push_Label
55 @Sys.init$ret.2
56 D=A
57 @SP
58 AM=M+1
59 A=A-1
60 M=D
// push_LCL
61 @LCL
62 D=M
63 @SP
64 AM=M+1
65 A=A-1
66 M=D
// push_ARG
67 @ARG
68 D=M
69 @SP
70 AM=M+1
71 A=A-1
72 M=D
// push_THIS
73 @THIS
74 D=M
75 @SP
76 AM=M+1
77 A=A-1
78 M=D
// push_THAT
79 @THAT
80 D=M
81 @SP
82 AM=M+1
83 A=A-1
84 M=D
// set_ARG
85 @SP
86 D=M
87 @5
88 D=D-A
89 @1
90 D=D-A
91 @ARG
92 M=D
// ser_LCL
93 @SP
94 D=M
95 @LCL
96 M=D
// goto_func
97 @Main.fibonacci
98 0;JMP
// set_retlabel
(Sys.init$ret.2)
// label WHILE
(Sys.init$WHILE)
// goto WHILE
99 @Sys.init$WHILE
100 0;JMP
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
101 @ARG
102 D=M
103 @0
104 A=A+D
105 D=M
106 @SP
107 AM=M+1
108 A=A-1
109 M=D
// push constant 2
110 @2
111 D=A
112 @SP
113 AM=M+1
114 A=A-1
115 M=D
// lt
116 @SP
117 AM=M-1
118 D=M
119 A=A-1
120 D=M-D
121 @LT1
122 D;JLT
123 @SP
124 A=M-1
125 M=0
126 @NOTLT1
127 0;JMP
(LT1)
128 @SP
129 A=M-1
130 M=-1
(NOTLT1)
// if-goto IF_TRUE
131 @SP
132 AM=M-1
133 D=M
134 @Main.fibonacci$IF_TRUE
135 D;JNE
// goto IF_FALSE
136 @Main.fibonacci$IF_FALSE
137 0;JMP
// label IF_TRUE
(Main.fibonacci$IF_TRUE)
// push argument 0
138 @ARG
139 D=M
140 @0
141 A=A+D
142 D=M
143 @SP
144 AM=M+1
145 A=A-1
146 M=D
// return
// set_endFrame
147 @LCL
148 D=M
149 @endFrame
150 M=D
// set_retAddr
151 @endFrame
152 D=M
153 @5
154 A=D-A
155 D=M
156 @retAddr1
157 M=D
// get_retvalue
158 @SP
159 AM=M-1
160 D=M
161 @ARG
162 A=M
163 M=D
// reset_SP
164 @ARG
165 D=M
166 @1
167 D=D+A
168 @SP
169 M=D
// restore_THAT
170 @endFrame
171 D=M
172 @1
173 A=D-A
174 D=M
175 @THAT
176 M=D
// restore_THIS
177 @endFrame
178 D=M
179 @2
180 A=D-A
181 D=M
182 @THIS
183 M=D
// restore_ARG
184 @endFrame
185 D=M
186 @3
187 A=D-A
188 D=M
189 @ARG
190 M=D
// restore_LCL
191 @endFrame
192 D=M
193 @4
194 A=D-A
195 D=M
196 @LCL
197 M=D
// goto_retAddr
198 @retAddr1
199 A=M
200 0;JMP
// label IF_FALSE
(Main.fibonacci$IF_FALSE)
// push argument 0
201 @ARG
202 D=M
203 @0
204 A=A+D
205 D=M
206 @SP
207 AM=M+1
208 A=A-1
209 M=D
// push constant 2
210 @2
211 D=A
212 @SP
213 AM=M+1
214 A=A-1
215 M=D
// sub
216 @SP
217 AM=M-1
218 D=M
219 A=A-1
220 M=M-D
// call Main.fibonacci 1
// push_Label
221 @Main.fibonacci$ret.3
222 D=A
223 @SP
224 AM=M+1
225 A=A-1
226 M=D
// push_LCL
227 @LCL
228 D=M
229 @SP
230 AM=M+1
231 A=A-1
232 M=D
// push_ARG
233 @ARG
234 D=M
235 @SP
236 AM=M+1
237 A=A-1
238 M=D
// push_THIS
239 @THIS
240 D=M
241 @SP
242 AM=M+1
243 A=A-1
244 M=D
// push_THAT
245 @THAT
246 D=M
247 @SP
248 AM=M+1
249 A=A-1
250 M=D
// set_ARG
251 @SP
252 D=M
253 @5
254 D=D-A
255 @1
256 D=D-A
257 @ARG
258 M=D
// ser_LCL
259 @SP
260 D=M
261 @LCL
262 M=D
// goto_func
263 @Main.fibonacci
264 0;JMP
// set_retlabel
(Main.fibonacci$ret.3)
// push argument 0
265 @ARG
266 D=M
267 @0
268 A=A+D
269 D=M
270 @SP
271 AM=M+1
272 A=A-1
273 M=D
// push constant 1
274 @1
275 D=A
276 @SP
277 AM=M+1
278 A=A-1
279 M=D
// sub
280 @SP
281 AM=M-1
282 D=M
283 A=A-1
284 M=M-D
// call Main.fibonacci 1
// push_Label
285 @Main.fibonacci$ret.4
286 D=A
287 @SP
288 AM=M+1
289 A=A-1
290 M=D
// push_LCL
291 @LCL
292 D=M
293 @SP
294 AM=M+1
295 A=A-1
296 M=D
// push_ARG
297 @ARG
298 D=M
299 @SP
300 AM=M+1
301 A=A-1
302 M=D
// push_THIS
303 @THIS
304 D=M
305 @SP
306 AM=M+1
307 A=A-1
308 M=D
// push_THAT
309 @THAT
310 D=M
311 @SP
312 AM=M+1
313 A=A-1
314 M=D
// set_ARG
315 @SP
316 D=M
317 @5
318 D=D-A
319 @1
320 D=D-A
321 @ARG
322 M=D
// ser_LCL
323 @SP
324 D=M
325 @LCL
326 M=D
// goto_func
327 @Main.fibonacci
328 0;JMP
// set_retlabel
(Main.fibonacci$ret.4)
// add
329 @SP
330 AM=M-1
331 D=M
332 A=A-1
333 M=D+M
// return
// set_endFrame
334 @LCL
335 D=M
336 @endFrame
337 M=D
// set_retAddr
338 @endFrame
339 D=M
340 @5
341 A=D-A
342 D=M
343 @retAddr2
344 M=D
// get_retvalue
345 @SP
346 AM=M-1
347 D=M
348 @ARG
349 A=M
350 M=D
// reset_SP
351 @ARG
352 D=M
353 @1
354 D=D+A
355 @SP
356 M=D
// restore_THAT
357 @endFrame
358 D=M
359 @1
360 A=D-A
361 D=M
362 @THAT
363 M=D
// restore_THIS
364 @endFrame
365 D=M
366 @2
367 A=D-A
368 D=M
369 @THIS
370 M=D
// restore_ARG
371 @endFrame
372 D=M
373 @3
374 A=D-A
375 D=M
376 @ARG
377 M=D
// restore_LCL
378 @endFrame
379 D=M
380 @4
381 A=D-A
382 D=M
383 @LCL
384 M=D
// goto_retAddr
385 @retAddr2
386 A=M
387 0;JMP
