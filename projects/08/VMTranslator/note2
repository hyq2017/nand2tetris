// label LOOP
(LOOP)

// if-goto LOOP
@SP
A=M-1
D=M
@LOOP
D;JNE

// goto LOOP
@LOOP
0;JMP

//call foo nargs
// push retAddr
// push LCL
// push ARG
// push THIS
// push THAT
// ARG = SP - 5 - nargs
// LCL = SP
// goto foo
// (retAddr)

// function Foo.main nvars
(Foo.main)
push constant 0 // repeat nvars time, initialize local variables to 0


// return
// endFrame = LCL
@LCL
D=M
@endFrame
M=D
// retAddr = *(endFrame - 5) // get return address
@endFrame
D=M
@5
A=D-A
D=M
@retAddr
M=D
// *ARG = pop() 
@SP
AM=M-1
D=M
@ARG
A=M
M=D
// SP = ARG + 1
@ARG
D=M
@1
D=D+A
@SP
M=D
// THAT = *(endFrame - 1)
@endFrame
D=M
@1
A=D-A
D=M
@THAT
M=D
// THIS = *(endFrame - 2)
// ARG = *(endFrame - 3)
// LCL = *(endFrame - 4)
// goto retAddr
@retAddr
A=M
0;JMP



// call fun nargs
// push retAddrLabel
@retAddrLabel
D=A
@SP
AM=M+1
A=A-1
M=D
// push LCL
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
// push ARG
// push THIS
// push THAT
// ARG = SP - 5 - nargs
@SP
D=M
@5
D=D-A
@nargs
D=D-A
@ARG
M=D
// LCL = SP
@SP
D=M
@LCL
M=D
// goto Foo
@Foo.main
0;JMP
(retAddr)



//boot
SP=256
call Sys.init 0
